{"version":3,"sources":["config/express.js"],"names":["app","env","get","use","static","join","root","serveIndex","set","engine","require","renderFile","urlencoded","extended","json","initialize","secret","secrets","session","saveUninitialized","resave","store","MongoStore","mongooseConnection","connection","db","process","SAUCE_USERNAME","csrf","angular","xframe","hsts","maxAge","includeSubDomains","preload","xssProtection","webpackDevMiddleware","stripAnsi","webpack","makeWebpackConfig","webpackConfig","DEV","compiler","browserSync","create","init","open","logFileChanges","ghostMode","proxy","port","ws","middleware","noInfo","stats","colors","timings","chunks","browserSyncPort","plugins","plugin","hasErrors","hasWarnings","sockets","emit","title","body","toString","timeout","reload"],"mappings":"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","file":"config/express.js","sourcesContent":["/**\n * Express configuration\n */\n\n'use strict';\n\nimport express from 'express';\nimport favicon from 'serve-favicon';\nvar serveIndex = require('serve-index')\nimport morgan from 'morgan';\nimport shrinkRay from 'shrink-ray';\nimport bodyParser from 'body-parser';\nimport methodOverride from 'method-override';\nimport cookieParser from 'cookie-parser';\nimport errorHandler from 'errorhandler';\nimport path from 'path';\nimport lusca from 'lusca';\nimport config from './environment';\nimport passport from 'passport';\nimport session from 'express-session';\nimport connectMongo from 'connect-mongo';\nimport mongoose from 'mongoose';\nvar MongoStore = connectMongo(session);\n\nexport default function(app) {\n  var env = app.get('env');\n\n  app.use('/public',express.static(path.join(config.root, 'public')));\n  app.use('/public/lala', serveIndex('public/lala', {'icons': true}))\n  app.use('/node_modules',express.static(path.join(config.root,'node_modules')));\n\n\n  if(env === 'development' || env === 'test') {\n    app.use(express.static(path.join(config.root, '.tmp')));\n  }\n\n\n  if(env === 'production') {\n    app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\n  }\n\n  app.set('appPath', path.join(config.root, 'client'));\n  app.use(express.static(app.get('appPath')));\n  app.use(morgan('dev'));\n\n  app.set('views', `${config.root}/server/views`);\n  app.engine('html', require('ejs').renderFile);\n  app.set('view engine', 'html');\n  app.use(shrinkRay());\n  app.use(bodyParser.urlencoded({ extended: false }));\n  app.use(bodyParser.json());\n  \n  app.use(methodOverride());\n  app.use(cookieParser());\n  app.use(passport.initialize());\n\n\n  // Persist sessions with MongoStore / sequelizeStore\n  // We need to enable sessions for passport-twitter because it's an\n  // oauth 1.0 strategy, and Lusca depends on sessions\n  app.use(session({\n    secret: config.secrets.session,\n    saveUninitialized: true,\n    resave: false,\n    store: new MongoStore({\n      mongooseConnection: mongoose.connection,\n      db: 'ctf'\n    })\n  }));\n\n  /**\n   * Lusca - express server security\n   * https://github.com/krakenjs/lusca\n   */\n  if(env !== 'test' && !process.env.SAUCE_USERNAME) {\n    app.use(lusca({\n      csrf: {\n        angular: true\n      },\n      xframe: 'SAMEORIGIN',\n      hsts: {\n        maxAge: 31536000, //1 year, in seconds\n        includeSubDomains: true,\n        preload: true\n      },\n      xssProtection: true\n    }));\n  }\n\n  if(env === 'development') {\n    const webpackDevMiddleware = require('webpack-dev-middleware');\n    const stripAnsi = require('strip-ansi');\n    const webpack = require('webpack');\n    const makeWebpackConfig = require('../../webpack.make');\n    const webpackConfig = makeWebpackConfig({ DEV: true });\n    const compiler = webpack(webpackConfig);\n    const browserSync = require('browser-sync').create();\n\n    /**\n     * Run Browsersync and use middleware for Hot Module Replacement\n     */\n    browserSync.init({\n      open: false,\n      logFileChanges: false,\n      ghostMode: false,\n      proxy: `localhost:${config.port}`,\n      ws: true,\n      middleware: [\n        webpackDevMiddleware(compiler, {\n          noInfo: false,\n          stats: {\n            colors: true,\n            timings: true,\n            chunks: false\n          }\n        })\n      ],\n      port: config.browserSyncPort,\n      plugins: ['bs-fullscreen-message']\n    });\n\n    /**\n     * Reload all devices when bundle is complete\n     * or send a fullscreen error message to the browser instead\n     */\n    compiler.plugin('done', function(stats) {\n      // console.log('webpack done hook');\n      if(stats.hasErrors() || stats.hasWarnings()) {\n        return browserSync.sockets.emit('fullscreen:message', {\n          title: 'Webpack Error:',\n          body: stripAnsi(stats.toString()),\n          timeout: 100000\n        });\n      }\n      browserSync.reload();\n    });\n  }\n\n  if(env === 'development' || env === 'test') {\n    app.use(errorHandler()); // Error handler - has to be last\n  }\n}\n"],"sourceRoot":"/source/"}