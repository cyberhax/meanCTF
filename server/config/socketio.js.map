{"version":3,"sources":["config/socketio.js"],"names":["socketio","on","socket","address","request","connection","remoteAddress","remotePort","connectedAt","Date","log","onDisconnect","onConnect","data","require","register"],"mappings":"AAAA;;;AAGA;;AAEA;;AAEA;;;;;;;;;;kBAgBe,UAASA,QAAT,EAAmB;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,WAASC,EAAT,CAAY,YAAZ,EAA0B,UAASC,MAAT,EAAiB;AACzCA,WAAOC,OAAP,GAAoBD,OAAOE,OAAP,CAAeC,UAAf,CAA0BC,aAA9C,SAA+DJ,OAAOE,OAAP,CAAeC,UAAf,CAA0BE,UAAzF;;AAEAL,WAAOM,WAAP,GAAqB,IAAIC,IAAJ,EAArB;;AAEAP,WAAOQ,GAAP,GAAa,YAAkB;AAC7B;AACD,KAFD;;AAIA;AACAR,WAAOD,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC5BU,mBAAaT,MAAb;AACAA,aAAOQ,GAAP,CAAW,cAAX;AACD,KAHD;;AAKA;AACAE,cAAUV,MAAV;AACAA,WAAOQ,GAAP,CAAW,WAAX;AACD,GAlBD;AAmBD,C;;;;AAlDD,SAASC,YAAT,GAAsB,UAAY,CAAE;;AAEpC;AACA,SAASC,SAAT,CAAmBV,MAAnB,EAA2B;AACzB;AACAA,SAAOD,EAAP,CAAU,MAAV,EAAkB,gBAAQ;AACxBC,WAAOQ,GAAP,CAAW,yBAAeG,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAX;AACD,GAFD;;AAIA;AACAC,UAAQ,yBAAR,EAAmCC,QAAnC,CAA4Cb,MAA5C;AACAY,UAAQ,iCAAR,EAA2CC,QAA3C,CAAoDb,MAApD;AACAY,UAAQ,2BAAR,EAAqCC,QAArC,CAA8Cb,MAA9C;AACD","file":"config/socketio.js","sourcesContent":["/**\n * Socket.io configuration\n */\n'use strict';\n\n// import config from './environment';\n\n// When the user disconnects.. perform this\nfunction onDisconnect(/*socket*/) {}\n\n// When the user connects.. perform this\nfunction onConnect(socket) {\n  // When the client emits 'info', this listens and executes\n  socket.on('info', data => {\n    socket.log(JSON.stringify(data, null, 2));\n  });\n\n  // Insert sockets below\n  require('../api/misc/misc.socket').register(socket);\n  require('../api/question/question.socket').register(socket);\n  require('../api/thing/thing.socket').register(socket);\n}\n\nexport default function(socketio) {\n  // socket.io (v1.x.x) is powered by debug.\n  // In order to see all the debug output, set DEBUG (in server/config/local.env.js) to including the desired scope.\n  //\n  // ex: DEBUG: \"http*,socket.io:socket\"\n\n  // We can authenticate socket.io users and access their token through socket.decoded_token\n  //\n  // 1. You will need to send the token in `client/components/socket/socket.service.js`\n  //\n  // 2. Require authentication here:\n  // socketio.use(require('socketio-jwt').authorize({\n  //   secret: config.secrets.session,\n  //   handshake: true\n  // }));\n\n  socketio.on('connection', function(socket) {\n    socket.address = `${socket.request.connection.remoteAddress}:${socket.request.connection.remotePort}`;\n\n    socket.connectedAt = new Date();\n\n    socket.log = function(...data) {\n      // console.log(`SocketIO ${socket.nsp.name} [${socket.address}]`, ...data);\n    };\n\n    // Call onDisconnect.\n    socket.on('disconnect', () => {\n      onDisconnect(socket);\n      socket.log('DISCONNECTED');\n    });\n\n    // Call onConnect.\n    onConnect(socket);\n    socket.log('CONNECTED');\n  });\n}\n"],"sourceRoot":"/source/"}