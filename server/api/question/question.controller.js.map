{"version":3,"sources":["api/question/question.controller.js"],"names":["index","show","create","upsert","patch","destroy","checkAnswer","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","apply","err","reject","save","removeEntity","remove","then","end","handleEntityNotFound","handleError","send","req","find","exec","catch","findById","params","id","body","_id","findOneAndUpdate","setDefaultsOnInsert","runValidators","question","answer","user","user1","indexOf","point","push"],"mappings":"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","file":"api/question/question.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/questions              ->  index\n * POST    /api/questions              ->  create\n * GET     /api/questions/:id          ->  show\n * PUT     /api/questions/:id          ->  upsert\n * PATCH   /api/questions/:id          ->  patch\n * DELETE  /api/questions/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport Question from './question.model';\nimport User from '../user/user.model';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if(entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction patchUpdates(patches) {\n  return function(entity) {\n    try {\n      jsonpatch.apply(entity, patches, /*validate*/ true);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return entity.save();\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if(entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if(!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of Questions\nexport function index(req, res) {\n  return Question.find().exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single Question from the DB\nexport function show(req, res) {\n  return Question.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new Question in the DB\nexport function create(req, res) {\n  return Question.create(req.body)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n\n// Upserts the given Question in the DB at the specified ID\nexport function upsert(req, res) {\n  if(req.body._id) {\n    delete req.body._id;\n  }\n  return Question.findOneAndUpdate({_id: req.params.id}, req.body, {upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\n\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Updates an existing Question in the DB\nexport function patch(req, res) {\n  if(req.body._id) {\n    delete req.body._id;\n  }\n  return Question.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(patchUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Question from the DB\nexport function destroy(req, res) {\n  return Question.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n\nexport function checkAnswer(req, res) {\n  \n  return Question.findById(req.params.id).exec()\n    .then((question)=>{\n      // console.log('checkAnswer',question);\n      if(question.answer==req.body.answer){\n        // console.log('user>.>:',req.body);\n        User.findById(req.body.user._id).exec()\n        .then(user1=>{\n\n          // console.log(!(user1.question.indexOf(question._id)>-1));\n          // console.log('user1.ques',user1.question,' question._id',question._id);\n          if(!(user1.question.indexOf(question._id)>-1)){\n\n          user1.point += question.point;\n          user1.question.push(req.params.id);\n          return user1.save()\n          .then(() => {\n            res.status(204).end();\n          })\n        }\n      });\n      }\n      else{\n        res.status(444).end();\n      }\n    })\n    //.then(checkAnswer(res))\n    .catch(handleError(res));\n}\n"],"sourceRoot":"/source/"}